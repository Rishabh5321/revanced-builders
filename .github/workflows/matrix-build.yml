name: Matrix Build Modules
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

permissions: write-all

jobs:
  generate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.versionr }}
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.json
            fi
          fi

      - name: Prepare version
        id: version
        run: echo "versionr=$(date +v%d-%m-%Y)" >> $GITHUB_OUTPUT

      - name: Generate build matrix from config.toml
        id: generate_matrix
        run: |
          # Install 'toml-cli' for parsing TOML
          pip install toml-cli

          # Get all section names where 'enabled = true'
          MATRIX_IDS=$(toml get config.toml --toml-path '$.keys()' | \
                       grep -E '^\[' | sed 's/\[\(.*\)\]/\1/' | \
                       while read -r section; do
                           enabled=$(toml get config.toml "$section.enabled" 2>/dev/null || echo "false")
                           if [ "$enabled" = "true" ]; then
                               echo "{\"id\": \"$section\"},"
                           fi
                       done | sed '$s/,$//') # Remove trailing comma from the last item

          echo "Generated matrix IDs: [$MATRIX_IDS]"
          echo "matrix=[$MATRIX_IDS]" >> "$GITHUB_OUTPUT"

      - name: Generate release
        run: |
          version=${{ steps.version.outputs.versionr }}
          echo -e "# ReVanced Patches\n" > release_notes.md
          dateRevanced=$(date -u -d $(gh release view --json publishedAt -q .publishedAt --repo revanced/revanced-patches))
          echo -e "\n Published on $dateRevanced\n" >> release_notes.md
          gh release view --json body -q .body --repo revanced/revanced-patches >> release_notes.md
          echo -e "\n---\n" >> release_notes.md
          echo -e "# RVX Patches\n" >> release_notes.md
          dateRex=$(date -u -d $(gh release view --json publishedAt -q .publishedAt --repo inotia00/revanced-patches))
          echo -e "\n Published on $dateRex\n" >> release_notes.md
          gh release view --json body -q .body --repo inotia00/revanced-patches >> release_notes.md
          echo -e "\n---\n" >> release_notes.md
          echo -e "# Anddea Patches\n" >> release_notes.md
          dateAnddea=$(date -u -d $(gh release view --json publishedAt -q .publishedAt --repo anddea/revanced-patches))
          echo -e "\n Published on $dateAnddea\n" >> release_notes.md
          gh release view --json body -q .body --repo anddea/revanced-patches >> release_notes.md
          echo -e "\n---\n" >> release_notes.md
          echo -e "\nUse [MicroG](https://github.com/ReVanced/GmsCore/releases/latest) for YouTube and Music" >> release_notes.md
          sed -i "1s/^/Release $version\n\n/" release_notes.md
          gh release create "$version" --draft -t "$version" -F release_notes.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run:
    runs-on: ubuntu-latest
    needs: generate-release
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-release.outputs.matrix) }}

    env:
      RELEASE_VERSION: ${{ needs.generate-release.outputs.version }}
    steps:
      - uses: actions/setup-java@v4.7.0
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          submodules: true

      - name: Generate ${{ matrix.id }} config
        run: |
           # The gen_sep_config.sh script is assumed to handle the config generation correctly
           # based on the matrix.id, which now corresponds directly to the section name.
           ./gen_sep_config.sh config.toml ${{ matrix.id }} sep_config.toml
           cat sep_config.toml

      - name: Build modules/APKs
        continue-on-error: true
        run: |
          count=0
          while [ $count -lt 3 ]; do # Increased attempts to 3 for robustness
            if ./build.sh sep_config.toml; then
              echo "Successfully built ${{ matrix.id }}"
              break
            else
              count=$((count+1))
              if [ $count -lt 3 ]; then
                echo "Build failed for ${{ matrix.id }}. Retrying attempt $((count+1))/3..."
                rm -rf temp build # Clean up before retry
              else
                echo "Failed to build ${{ matrix.id }} after 3 attempts"
                exit 1
              fi
            fi
          done
        env:
          NEXT_VER_CODE: ${{ env.RELEASE_VERSION }}

      - name: Get output (for YouTube only)
        id: get_output
        if: ${{ matrix.id == 'YouTube' }} && success()
        run: |
          # This step extracts build.md content for the 'YouTube' module specifically.
          # If you want to aggregate build.md for all modules, this logic needs to be moved
          # to a later, separate job that collects outputs from all 'run' jobs.
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Upload modules to release
        if: success() # Only upload if the build step was successful for this matrix item
        run: |
          # get all apk and zip files in ./build/* directory, for each run gh release upload
          for file in $(find build -type f -name "*.apk" -o -name "*.zip"); do
            echo "Uploading $file to release ${{ env.RELEASE_VERSION }}"
            gh release upload ${{ env.RELEASE_VERSION }} "$file"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-metadata:
    needs: [generate-release, run] # Depends on 'run' to ensure all builds are complete
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Prepare build.md
        run: |
          cp extras.sh /tmp/extras.sh
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git fetch
          # Ensure the 'update' branch exists and is checked out
          git checkout update || git checkout -b update # Creates 'update' if it doesn't exist
          filename="build.md"
          /tmp/extras.sh "revanced/revanced-integrations" "revanced/revanced-patches" "revanced/revanced-cli" > $filename
          echo -e "\n" >> $filename
          /tmp/extras.sh "inotia00/revanced-integrations" "inotia00/revanced-patches" "inotia00/revanced-cli" >> $filename
          echo -e "\n" >> $filename
          /tmp/extras.sh "anddea/revanced-integrations" "anddea/revanced-patches" "revanced/revanced-cli" >> $filename
          cat $filename
          git add $filename
          # Check if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Bump version ${{ needs.generate-release.outputs.version }}"
            git push origin update # Push to the 'update' branch
          fi

  release:
    needs: [generate-release, run] # Depends on 'run' to ensure all builds are complete
    runs-on: ubuntu-latest
    steps:
      - name: Mark release non-draft
        run: |
          if [[ "${{ github.ref_name }}" == 'main' ]]; then
            echo "Marking release as non-draft and latest for main branch."
            gh release edit ${{ needs.generate-release.outputs.version }} --draft=false --latest --repo ${{ github.repository }}
          else
            echo "Marking release as non-draft and prerelease for non-main branch (${{ github.ref_name }})."
            gh release edit ${{ needs.generate-release.outputs.version }} --draft=false --prerelease --repo ${{ github.repository }}
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}